/**************************************************************** *  文件名     ： WeightModelCache.java *  日期         :  2012-12-28 *  Company: 上海绿岸网络科技有限公司 *  (C) Copyright Green Shore Network Technology Co.,Ltd.2012 *           		All Rights Reserved. *  注意： 本内容仅限于上海绿岸网络科技有限公司内部使用，禁止转发 ****************************************************************/package com.iwgame.xengine.xtask.email.cache;import java.util.Hashtable;import java.util.List;import java.util.Map;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.springframework.stereotype.Component;import com.iwgame.xengine.xtask.email.dao.WeightDao;import com.iwgame.xengine.xtask.email.model.WeightModel;/** * @类名: WeightModelCache * @描述: *  * @作者: 吴君杰 * @邮件: wujunjie@iwgame.com * @日期: 2012-12-28下午6:01:31 * @版本: 1.0 */@Componentpublic class WeightModelCache {	@Resource	private WeightDao weightDao;	private final Logger logger = Logger.getLogger(WeightModelCache.class);	private final Map<Integer, List<WeightModel>> weight_cache_pool = new Hashtable<Integer, List<WeightModel>>();	/**	 * 缓存中得到数据	 * 	 * @param channelid	 * @return	 */	public List<WeightModel> getWeightModelsByChanenlid(int channelid) {		if (weight_cache_pool.get(channelid) == null) {			synchronized (this) {				if (weight_cache_pool.get(channelid) == null) {					List<WeightModel> weightModels = weightDao.getWeightModelByChannelId(channelid);					if (weightModels != null && weightModels.size() > 0) {						weight_cache_pool.put(channelid, weightModels);						logger.info("读取数据库通道 [" + channelid + "] 列表数据成功,缓存数据完毕!");					} else {						deleteWeightModelsByChanenlid(channelid);						logger.info("没得到 chanenlid:" + channelid + " 的模板映射信息,返回 :" + weightModels);					}				}			}		}		return weight_cache_pool.get(channelid);	}	/**	 * 更变缓存中数据	 * 	 * @param channelid	 */	public void changeWeightModelsByChanenlid(int channelid) {		List<WeightModel> weightModels = weightDao.getWeightModelByChannelId(channelid);		if (weightModels != null && weightModels.size() > 0) {			weight_cache_pool.put(channelid, weightModels);			logger.info("通道[" + channelid + "],缓存数据更变成功!");		} else {			deleteWeightModelsByChanenlid(channelid);			logger.info("删除通道:" + channelid + " 缓存数据成功!");		}	}	/**	 * 根据chanenlid删除缓存数据	 * 	 * @param channelid	 */	public void deleteWeightModelsByChanenlid(int channelid) {		if (weight_cache_pool.containsKey(channelid)) {			weight_cache_pool.remove(channelid);			logger.info("删除通道[" + channelid + "]缓存数据成功!");		} else {			logger.info("缓存中不存在通道ID:[" + channelid + "]的数据,删除失败!");		}	}	/**	 * 删除所有缓存数据	 */	public void removeAllWeightModelsCache() {		weight_cache_pool.clear();		logger.info("网关消息更变,删除所有缓存数据成功!");	}}